[{"idx": 1, "text": "Um programa C consiste de várias funções externas, compiladas juntas ou separadamente, que estão no mesmo nível lexicográfico.", "trivia": 1}, {"idx": 2, "text": "A linguagem C apresenta as seguintes características: economia de expressões, moderno controle de fluxo e estruturas de dados, conjunto de operadores rico e poderoso, linguagem de nível intermediário, biblioteca das funções que são dependentes do hardware", "trivia": 1}, {"idx": 3, "text": "O código <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #333399; font-weight: bold\">void</span> <span style=\"color: #0066BB; font-weight: bold\">troca</span> (<span style=\"color: #333399; font-weight: bold\">int</span> ax, <span style=\"color: #333399; font-weight: bold\">int</span> ay) { <span style=\"color: #333399; font-weight: bold\">int</span> temp; temp <span style=\"color: #333333\">=</span> <span style=\"color: #333333\">*</span>ax; <span style=\"color: #333333\">*</span>ax <span style=\"color: #333333\">=</span> <span style=\"color: #333333\">*</span>ay; <span style=\"color: #333333\">*</span>ay <span style=\"color: #333333\">=</span> temp} </code> exemplifica a passagem de argumentos por referência, sendo os endereços dos argumentos atuais passados para os parâmetros formais.", "trivia": 0}, {"idx": 4, "text": "O código C <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">enum</span> escapes { BELL <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\a&#39;</span>, BACKSPACE <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\b&#39;</span>, TAB <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\t&#39;</span>, NEWLINE <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\n&#39;</span>, VTAB <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\v&#39;</span>, RETURN <span style=\"color: #333333\">=</span> <span style=\"color: #0044DD\">&#39;\\r&#39;</span>}; </code> está correto", "trivia": 1}, {"idx": 5, "text": "A expressão <code style=\"margin: 0; line-height: 125%\">x <span style=\"color: #333333\">=</span>( y <span style=\"color: #333333\">=</span> <span style=\"color: #0000DD; font-weight: bold\">2</span>, y <span style=\"color: #333333\">+</span> <span style=\"color: #0000DD; font-weight: bold\">3</span>); </code> está correta e retorna o valor 5", "trivia": 1}, {"idx": 6, "text": "Na gramática C, os especificadores de classes de armazenamento são: auto, static, register, extern, typedef", "trivia": 0}, {"idx": 7, "text": "A classe de armazenamento static aplicada a variáveis globais ou funções esconde nome, limitando o escopo ao resto do arquivo fonte onde são declaradas. Isso evita mudanças acidentais.", "trivia": 1}, {"idx": 8, "text": "O corpo do seguinte comando <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">for</span>(;;) </code> não será executado nenhuma vez.", "trivia": 0}, {"idx": 9, "text": "Ponteiros em C são tipados e podem ser iniciados durante a declaração dos mesmos, exceto void", "trivia": 0}, {"idx": 10, "text": "As macros são subrotinas abertas em que não ocorrem mudança de contexto. Se possuírem parâmetros, eles não são tipados e servem para diferentes tipos de dados.", "trivia": 1}, {"idx": 11, "text": "Os qualificadores de tipo const e volatile podem ser utilizados para tipos de objetos de dados elementares (char, short, int, long, float, double, signed, unsigned) ou para tipos de objetos de dados estruturados (especificador de struct, union ou enum, ou nome de typedef). ", "trivia": 1}, {"idx": 12, "text": "Uma union é um array heterogêneo cujos membros possuem offset zero.", "trivia": 0}, {"idx": 13, "text": "Novos tipos de dados podem ser criados em C com o uso das declarações struct e typedef.", "trivia": 0}, {"idx": 14, "text": "O qualificador de tipo const visa aumentar oportunidades para otimização do código, se aplicado a variável ou array, mas não pode ser aplicado a array passado como parâmetro de função.", "trivia": 0}, {"idx": 15, "text": "Protótipo de função foi acrescentado em C para permitir a checagem de tipo dinâmica de funções.", "trivia": 0}, {"idx": 16, "text": "Protótipo <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #333399; font-weight: bold\">int</span> <span style=\"color: #0066BB; font-weight: bold\">power</span> (<span style=\"color: #333399; font-weight: bold\">int</span>, <span style=\"color: #333399; font-weight: bold\">int</span>);</code> não é válido porque apresenta somente os tipos de Argumentos.", "trivia": 0}, {"idx": 17, "text": "Para leitura e gravação de strings as funções char *gets(char*s) e int puts (const char*s) são recomendadas.", "trivia": 0}, {"idx": 18, "text": "O código <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">for</span> (i <span style=\"color: #333333\">=</span> <span style=\"color: #0000DD; font-weight: bold\">1</span>; i <span style=\"color: #333333\">&lt;</span> argc; i<span style=\"color: #333333\">++</span>) printf(<span style=\"background-color: #fff0f0\">&quot;%s%s&quot;</span>, argv[i], (i <span style=\"color: #333333\">&lt;</span> argc <span style=\"color: #333333\">-</span> <span style=\"color: #0000DD; font-weight: bold\">1</span>) <span style=\"color: #333333\">?</span> <span style=\"background-color: #fff0f0\">&quot; &quot;</span> <span style=\"color: #333333\">:</span> <span style=\"background-color: #fff0f0\">&quot;&quot;</span>);</code> e o código <code style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">while</span>(<span style=\"color: #333333\">--</span>argc <span style=\"color: #333333\">&gt;</span> <span style=\"color: #0000DD; font-weight: bold\">0</span>) printf(<span style=\"background-color: #fff0f0\">&quot;%s%s&quot;</span>, <span style=\"color: #333333\">*++</span>argv, (argc <span style=\"color: #333333\">&gt;</span> <span style=\"color: #0000DD; font-weight: bold\">1</span>) <span style=\"color: #333333\">?</span> <span style=\"background-color: #fff0f0\">&quot; &quot;</span> <span style=\"color: #333333\">:</span> <span style=\"background-color: #fff0f0\">&quot;&quot;</span>);</code> são equivalentes ", "trivia": 1}, {"idx": 19, "text": "O ponteiro tipo void, o operador sizeof() e o uso de funções ao invés de comandos para ações dependentes de hardware são as abordagens em C para permitir a implementação de código fonte portável.", "trivia": 1}, {"idx": 20, "text": "O qualificador volatile indica ao compilador oportunidades de otimização sugerindo colocar o objeto em memória cache.", "trivia": 0}, {"idx": 21, "text": "O código abaixo em C ANSI ilustra a definição de uma função inline na qual não há mudança de contexto durante execução. <pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">inline</span> <span style=\"color: #333399; font-weight: bold\">double</span> <span style=\"color: #0066BB; font-weight: bold\">dabs</span>(<span style=\"color: #333399; font-weight: bold\">double</span> x) { <span style=\"color: #008800; font-weight: bold\">return</span> x <span style=\"color: #333333\">&lt;</span> <span style=\"color: #6600EE; font-weight: bold\">0.0</span><span style=\"color: #333333\">?</span> <span style=\"color: #333333\">-</span>x <span style=\"color: #333333\">:</span> x; }</pre>", "trivia": 0}, {"idx": 22, "text": "Na gramática C, a regra de definição de um identificador é: inicia por letra e pode ser seguido por letra ou dígito decimal.", "trivia": 1}, {"idx": 23, "text": "Expressões de atribuição podem ser abreviadas pela forma op= onde op pode ser qualquer operador +,-,*,/,%,<<,>>,&,^,|.", "trivia": 1}, {"idx": 24, "text": "Funções estáticas são visíveis no resto do arquivo fonte onde são declaradas e no código incluído por includes, se existirem.", "trivia": 1}, {"idx": 25, "text": "As expressões ++p->len; e (++p)->len; são equivalentes.", "trivia": 0}, {"idx": 26, "text": "A expressão (p++)->len; retorna o valor inteiro len e incrementa o ponteiro p.", "trivia": 1}, {"idx": 27, "text": "A expressão *p->str; retorna o código ASCII do caracter apontado por str.", "trivia": 1}, {"idx": 28, "text": "A expressão p->str; retorna o endereço da string apontada por str.", "trivia": 1}, {"idx": 29, "text": "As expressões *p->str++; e (*p->str)++; são equivalentes.", "trivia": 0}, {"idx": 30, "text": "A Expressão *p++->str; retorna o código ASCII do caracter apontado por p e incrementa o ponteiro p.", "trivia": 1}]